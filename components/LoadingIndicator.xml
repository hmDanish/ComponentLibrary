<?xml version="1.0" encoding="utf-8"?>

<!-- Copyright 2016 Roku Corp.  All Rights Reserved. -->

<!-- LoadingIndicator component can be used to indicate loading/buffering process. If added to
another element, it
    scales to width and height of parent element and positions itself at the center. Width and height
can also be set
    manually.
    It consists of 3 elements:
    - background, it can be either a rectangle, whose color and opacity can be adjusted, or image
    - square spinning image, which has to be specified
    - optional text under the spinning image.

Sample: 
    <LoadingIndicator
        imageUri="pkg:/images/loader.png"
        clockwise="false"
        spinInterval="4"
        text="Loading..."
        spacing="40"
        width="500"
        height="700"
        imageWidth="100"
        imageHeight="100"
        centered="true"
        font="font:LargeBoldSystemFont"
        backgroundColor="0x551A8B"
        backgroundOpacity="0.6"/> -->

<component name="LoadingIndicator" extends="Scene">

    <interface>
        <!--     URI of the loading indicator image/spinner graphic, if used. -->
        <field id="imageUri" type="string" alias="image.uri" />
        <!--     If specified, width of a spinning image, otherwise bitmap width is used. You can
        specify only imageWidth
         and imageHeight will be calculated accordingly to image's aspect ratio. Make sure image fits into
        component or
         it will be downscaled. -->
        <field id="imageWidth" type="float" onChange="onImageWidthChange" />
        <!--     If specified, height of a spinning image, otherwise bitmap height is used. You can
        specify only imageHeight
         and imageWidth will be calculated accordingly to image's aspect ratio. Make sure image fits into
        component or
         it will be downscaled. -->
        <field id="imageHeight" type="float" onChange="onImageHeightChange" />
        <!--     If true, animate image in imageUri field clockwise, otherwise counter-clockwise. -->
        <field id="clockwise" type="bool" value="true" onChange="changeRotationDirection" />
        <!--     If set, time in seconds it take for one complete image rotation.  -->
        <field id="spinInterval" type="time" alias="rotationAnimation.duration" value="3" />
        <!--     If true, component is centered on the parent component. This overrides the translation
        field settings.
         If false, translation positions the component. Note that you must set desired translation AFTER
        setting
         this to false, otherwise component might be centered. -->
        <field id="centered" type="bool" value="true" onChange="updateLayout" />
        <!--     Color of the background. -->
        <field id="backgroundColor" type="color" alias="background.color" value="0xFFFFFF" />
        <!--     Background image. If set, backgroundColor is ignored. -->
        <field id="backgroundUri" type="string" onChange="onBackgroundImageChange" />
        <!--     Opacity of the background. To remove background, this should be set to 0. -->
        <field id="backgroundOpacity" type="float" alias="background.opacity" value="0.4" />
        <!--     Loading/message text, if used. -->
        <field id="text" type="string" alias="text.text" onChange="onTextChange" />
        <!--     Color of the text. -->
        <field id="textColor" type="color" alias="text.color" />
        <!--     Space, in pixels, between text and spinner. -->
        <field id="spacing" type="float" value="30" />
        <!--     Left and right text padding. -->
        <field id="textPadding" type="float" onChange="onTextPaddingChange" />
        <!--     Font of a loading text. -->
        <field id="font" type="node" alias="text.font" />
        <!--     If set, specifies width of the component, otherwise, parent's width is used. -->
        <field id="width" type="float" onChange="updateLayout" />
        <!--     If set, specifies height of the component, otherwise, parent's height is used. -->
        <field id="height" type="float" onChange="updateLayout" />
        <!--     Read-only field. Can be in 2 states: "running" and "stopped". -->
        <field id="state" type="string" />
        <!--     Write-only field. Can be used to start/stop spinning animation. Animation starts
        automatically,
         to stop it you should set this field to "stop". To start it again, set this to "start".
         You can also use fadeInterval field to make animation disappear once it's stopped. -->
        <field id="control" type="string" onChange="onControlChange" />
        <!--     If set, time in seconds to fade from 100% to 0% opaque once control is set to "stop". -->
        <field id="fadeInterval" type="time" />
    </interface>

    <script type="text/brightscript">
<![CDATA[

sub init()
    m.image = m.top.findNode("image")
    m.image.observeField("loadStatus", "omImageLoadStatusChange")
    m.text = m.top.findNode("text")
    m.rotationAnimation = m.top.findNode("rotationAnimation")
    m.rotationAnimationInterpolator = m.top.findNode("rotationAnimationInterpolator")
    m.fadeAnimation = m.top.findNode("fadeAnimation")
    m.loadingIndicatorGroup = m.top.findNode("loadingIndicatorGroup")
    m.loadingGroup = m.top.findNode("loadingGroup")
    m.background = m.top.findNode("background")

    m.textHeight = 0
    m.textPadding = 0

    m.addedObservers = false

    startAnimation()
end sub


sub updateLayout()
    ' check for parent node and set observers
    if not m.addedObservers
        parentNode = m.top.getParent()
        ' if parent exists, set observers only once
        if parentNode <> invalid
            parentNode.observeField("width", "updateLayout")
            parentNode.observeField("height", "updateLayout")
            m.addedObservers = true
        end if
    end if

    componentWidth = getComponentWidth()
    componentHeight = getComponentHeight()
    
    m.text.width = componentWidth - m.textPadding * 2
    m.background.width = componentWidth
    m.background.height = componentHeight
    
    if m.top.centered
        m.top.translation = [(getParentWidth() - componentWidth) / 2, (getParentHeight() - componentHeight) / 2]
    end if
    
    loadingGroupWidth = max(m.image.width, m.text.width)
    
    loadingGroupHeight = m.image.height + m.textHeight
    
    ' check whether image and text fit into component, if they don't - downscale image
    if m.imageAspectRatio <> invalid
        loadingGroupAspectRatio = loadingGroupWidth / loadingGroupHeight
        if loadingGroupWidth > componentWidth
            m.image.width = m.image.width - (loadingGroupWidth - componentWidth)
            m.image.height = m.image.width / m.imageAspectRatio
            loadingGroupWidth = max(m.image.width, m.text.width)
            loadingGroupHeight = loadingGroupWidth / loadingGroupAspectRatio
        end if
        if loadingGroupHeight > componentHeight
            m.image.height = m.image.height - (loadingGroupHeight - componentHeight)
            m.image.width = m.image.height * m.imageAspectRatio
            loadingGroupHeight = m.image.height + m.textHeight
            loadingGroupWidth = loadingGroupHeight * loadingGroupAspectRatio
        end if
    end if
    
    m.image.scaleRotateCenter = [m.image.width / 2, m.image.height / 2]
    
    ' position loading group, image and text at the center
    m.loadingGroup.translation = [(componentWidth - loadingGroupWidth) / 2, (componentHeight - loadingGroupHeight) / 2]
    m.image.translation = [(loadingGroupWidth - m.image.width) / 2, 0]
    m.text.translation = [0, m.image.height + m.top.spacing]
end sub


sub changeRotationDirection()
    if m.top.clockwise
        m.rotationAnimationInterpolator.key = [1, 0]
    else
        m.rotationAnimationInterpolator.key = [0, 1]
    end if
end sub


sub omImageLoadStatusChange()
    if m.image.loadStatus = "ready"
        m.imageAspectRatio = m.image.bitmapWidth / m.image.bitmapHeight
        
        if m.top.imageWidth > 0 and m.top.imageHeight <= 0
            m.image.height = m.image.width / m.imageAspectRatio
        else if m.top.imageHeight > 0 and m.top.imageWidth <= 0
            m.image.width = m.image.height * m.imageAspectRatio
        else if m.top.imageHeight <= 0 and m.top.imageWidth <= 0
            m.image.height = m.image.bitmapHeight
            m.image.width = m.image.bitmapWidth
        end if
        updateLayout()
    end if
end sub


sub onImageWidthChange()
    if m.top.imageWidth > 0
        m.image.width = m.top.imageWidth
        if m.top.imageHeight <= 0 and m.imageAspectRatio <> invalid
            m.image.height = m.image.width / m.imageAspectRatio
        end if
        updateLayout()
    end if
end sub


sub onImageHeightChange()
    if m.top.imageHeight > 0
        m.image.height = m.top.imageHeight
        if m.top.imageWidth <= 0 and m.imageAspectRatio <> invalid
            m.image.width = m.image.height * m.imageAspectRatio
        end if
        updateLayout()
    end if
end sub


sub onTextChange()
    prevTextHeight = m.textHeight
    if m.top.text = ""
        m.textHeight = 0
    else
        m.textHeight = m.text.localBoundingRect().height + m.top.spacing
    end if
    if m.textHeight <> prevTextHeight
        updatelayout()    
    end if
end sub


sub onBackgroundImageChange()
    if m.top.backgroundUri <> ""
        previousBackground = m.background
        m.background = m.top.findNode("backgroundImage")
        m.background.opacity = previousBackground.opacity
        m.background.translation = previousBackground.translation
        m.background.width = previousBackground.width
        m.background.height = previousBackground.height
        m.background.uri = m.top.backgroundUri
        previousBackground.visible = false
    end if
end sub


sub onTextPaddingChange()
    if m.top.textPadding > 0
        m.textPadding = m.top.textPadding
    else
        m.textPadding = 0
    end if
    updateLayout()
end sub


sub onControlChange()
    if m.top.control = "start"
        ' opacity could be set to 0 by fade animation so restore it
        m.loadingIndicatorGroup.opacity = 1
        startAnimation()
    else if m.top.control = "stop"
        ' if there is fadeInterval set, fully dispose component before stopping spinning animation
        if m.top.fadeInterval > 0
            m.fadeAnimation.duration = m.top.fadeInterval
            m.fadeAnimation.observeField("state", "onFadeAnimationStateChange")
            m.fadeAnimation.control = "start"
        else
            stopAnimation()
        end if
    end if
end sub


sub onFadeAnimationStateChange()
    if m.fadeAnimation.state = "stopped"
        stopAnimation()
    end if
end sub


function getComponentWidth() as Float
    if m.top.width = 0
        ' use parent's width
        return getParentWidth()
    else
        return m.top.width
    end if
end function


function getComponentHeight() as Float
    if m.top.height = 0
        ' use parent's height
        return getParentHeight()
    else
        return m.top.height
    end if
end function


function getParentWidth() as Float
    if m.parentNode <> invalid and m.parentNode.width <> invalid
        return m.parentNode.width
    else
        return 1920
    end if
end function


function getParentHeight() as Float
    if m.parentNode <> invalid and m.parentNode.height <> invalid
        return m.parentNode.height
    else
        return 1080
    end if
end function


sub startAnimation()
    m.top.state = "running"
end sub


sub stopAnimation()
    m.rotationAnimation.control = "stop"
    m.top.state = "stopped"
end sub


function max(a as Float, b as Float) as Float
    if a > b
        return a
    else
        return b
    end if
end function

]]>
</script>
    <children>
        <Group
            id="loadingIndicatorGroup">
            <Rectangle
                id="background" />
            <Poster
                id="backgroundImage" />
            <Group
                id="loadingGroup">
                <Poster id="image">
                    <Animation
                        id="rotationAnimation"
                        repeat="true"
                        easeFunction="linear">
                        <FloatFieldInterpolator
                            id="rotationAnimationInterpolator"
                            key="[1, 0]"
                            keyValue="[0, 6.283]"
                            fieldToInterp="image.rotation" />
                    </Animation>
                </Poster>
                <Label
                    id="text"
                    horizAlign="center" />
            </Group>
            <Animation
                id="fadeAnimation"
                repeat="false"
                easeFunction="linear">
                <FloatFieldInterpolator
                    keyValue="[1, 0]"
                    key="[0, 1]"
                    fieldToInterp="loadingIndicatorGroup.opacity" />
            </Animation>
        </Group>
    </children>

</component>